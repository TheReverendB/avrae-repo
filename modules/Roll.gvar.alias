# ========
# | Roll |
# ========
#
# A couple functions to make adding checks and saves easier inside an alias.
#
# usage: `using(Roll='4dd0faad-8520-41a9-a0e2-ed922557578d')` allows you to do `Roll.check('sleight', argparse(&ARGS&))`


# grab a reroll number if the character has the csetting or default to None
reroll_number = character().csettings.get("reroll", None)


def check(skill_name: str, parsed_args: dict, custom_args: dict={}):
  """
  Rolls a check taking arguments like `adv`/`dis`, `-b`, `-mc` and `guidance`
  Automatically rerolls 1s for Haflings (with the reroll csetting) and adds minimum checks for Reliable Talent
  Handles adding 1/2 proficiency for checks that are not already adding a proficiecy bonus for Jack of all Trades
  Returns a dict with the check name and SimpleRollResult
  Partial matching allows users/aliasers to enter 'sleight' or 'sleight of hand' or 'sleightOfHand'

  :arg str skill_name: the name of the skill to roll
  :arg dict parsed_args: typically argparse(&ARGS&) so the function has access to any arguments passed to your alias
  :var dict custom_args: dict of replacement arguments, default: {}
  ```json
  {"advantage": {"adv": "survAdv", "dis": "survDis"}, "b": "survBonus", "guidance": "survGuidance", "mc": "survMC"}```
  :return: a dict containing the name, SimpleRollResult and naturalRoll of the check
  :rtype: dict

  example alias
  ```py
  !alias example echo <drac2>
  using( Roll='4dd0faad-8520-41a9-a0e2-ed922557578d' )
  check = Roll.check( "&1&", argparse(&ARGS&) )
  return f"{check.name}: {check.roll}  You rolled a {check.naturalRoll} on the d20 and got a {check.roll.total}!"
  </drac2>```
  """


  # partial matching for our skill_name
  skill         = ([x for x,y in character().skills if skill_name.lower().replace(' ','') in x.lower()]+[None])[0]

  if not skill:
    err(f"""No skill or stat matching your input (`{skill_name}`) found.  Try again.""")

  # grab adv/dis from our parsed args and make it a boolean. adv=True, dis=False, neither is None.
  adv           = parsed_args.adv(boolwise=True, custom=custom_args.get('advantage',None))
  
  # grab a minimum from our args `-mc #` or set it to 10 if the character has the csetting 'talent' set to True and has proficiency or expertise in the chosen skill.
  min_chk_arg   = custom_args.get('mc', 'mc')
  minimum_check = parsed_args.last(min_chk_arg, None, int) or (10 if character().csettings.get("talent", False) and character().skills[skill].prof>=1 else None)

  # grab bonuses and add them to our roll.  We can also parse our args for the commonly used 'guidance' snippet.
  bonus_arg     = custom_args.get('b', 'b')
  guidance_arg  = custom_args.get('guidance', 'guidance')
  jackBonus     = f"+{proficiencyBonus//2}[jack of all trades]" if character().levels.get('Bard') >= 2 and not character().skills[skill].prof else ''
  guidance      = '+1d4[guidance]' if parsed_args.get(guidance_arg) else ''
  bonus         = ''.join(parsed_args.get(bonus_arg,type_=lambda x: "+"+x if x[0] not in "+-" else x)) + guidance + jackBonus

  # put all those arguments in the proper places in our d20() function, inside vroll().
  r             = vroll(character().skills[skill].d20(adv, reroll_number, minimum_check)+bonus)

  # let's return the natural roll as well, if that's needed
  left = r.raw
  while left.children:
    left = left.children[0]
  natural_check_roll = int(left)

  # return our dict so we can access either the roll or the skill name as desired
  return {'name': skill.replace('H', ' H').replace('O',' O').title(), 'roll': r, 'naturalRoll': natural_check_roll}


def save(save_name: str, parsed_args: dict, custom_args: dict={}):
  """
  Rolls a save, taking arguments like `adv`/`dis` and `-b`
  Automatically rerolls 1s for Haflings (with the reroll csetting)
  Returns a dict with the save name and SimpleRollResult
  Partial matching allows for users to type 'dex' or 'Dexterity'

  :arg str save_name: the name of the save to roll
  :arg dict parsed_args: typically argparse(&ARGS)
  :var dict custom_args: a dict of replacement arguments in a dict, default: {}
  ```json
  {"advantage": {"adv": "sadv", "dis": "sdis"}, "b": "sb"}```
  :return: a dict containing the name and the SimpleRollResult of the save
  :rtype: dict

  example alias
  ```py
  !alias example echo <drac2>
  using( Roll='4dd0faad-8520-41a9-a0e2-ed922557578d' )
  save = Roll.save( "&1&", argparse(&ARGS&) )
  return f"{save.name}: {save.roll}  You rolled a {save.naturalRoll} on the d20 and got a {save.roll.total}!"
  </drac2>```

  - Saves do not support minimum checks or guidance -
  """

  save_names    = ['strength', 'dexterity', 'constitution', 'wisdom', 'intelligence', 'charisma']
  save          = ([x for x in save_names if save_name.lower() in x]+[None])[0]

  if not save:
    err(f"""No save matching your input (`{save_name}`) found.  Try again.""")

  adv           = parsed_args.adv(boolwise=True, custom=custom_args.get('advantage',None))
  bonus_arg     = custom_args.get('b', 'b')
  bonus         = ''.join(parsed_args.get(bonus_arg,type_=lambda x: "+"+x if x[0] not in "+-" else x))
  r             = vroll(character().saves.get(save).d20(adv, reroll_number)+bonus)

  # let's return the natural roll as well
  left = r.raw
  while left.children:
    left = left.children[0]
  natural_save_roll = int(left)

  return {'name': save.title(), 'roll': r, 'naturalRoll': natural_save_roll}
