<drac2>
ch    = character()
cc    = "Necklace of Prayer Beads"
n     = '\n'
alias = 'embed'
title = f"""-title "{name} checks out their {cc}:" """
fields= ''
desc  = ''
mod   = 0

v2014 = character().csettings['version']=='2014' if ctx.guild.servsettings()['allow_character_override'] else ctx.guild.servsettings()['version']=='2014'

# look for the cc and reset our beads if it is full or someone enters 'reset'
if ch.cc_exists(cc):
      if ch.get_cc(cc) or '&1&'.lower()=='reset':
            PBDict = load_json(get('PrayerBeads', '{"reset": [], "available": []}'))
            PBDict['available'] = PBDict.reset            # reset our 'available' beads
            ch.set_cvar('PrayerBeads',dump_json(PBDict))  # store our dict as a cvar
            ch.mod_cc(cc, -1)                             # use the counter so we don't reset until a long rest
            mod = 1

# add a cc to track long rests/necklace recharging.
ch.create_cc_nx(cc,0,1,'long','bubble',desc="This necklace has 1d4 + 2 magic beads made from aquamarine, black pearl, or topaz. It also has many nonmagical beads made from stones such as amber, bloodstone, citrine, coral, jade, pearl, or quartz.\n\nOnce a magic bead's spell is cast, that bead can't be used again until the next dawn.")

# change our old list to a dict or load the new dict
if typeof(load_json(get('PrayerBeads', '{}')))=='SafeList':
      beads = load_json(get('PrayerBeads','[]'))
      PBDict = {"reset": beads, "available": beads}
      ch.set_cvar('PrayerBeads',dump_json(PBDict))  # store our dict as a cvar
else:
      PBDict = load_json(get('PrayerBeads', '{"reset": [], "available": []}'))

 
beads = PBDict.available  # set our old variable to the new dict value

# a dict to assign bead type to spell name
spellBeads  = {'bless': 'Blessing', 'cure wounds': 'Curing', 'lesser restoration': 'Curing', 'greater restoration': 'Favor', 'branding smite': 'Smiting', 'planar ally': 'Summons', 'wind walk': 'Wind Walking'} if v2014 else {'bless': 'Blessing', 'cure wounds': 'Curing', 'lesser restoration': 'Curing', 'greater restoration': 'Favor', 'shining smite': 'Smiting', 'guardian of faith': 'Summons', 'wind walk': 'Wind Walking'}

spell_table  = f"""```\nBead of...   | Spell\n-------------|--------------------\nBlessing     | Bless\nCuring       | Cure Wounds\n             |  (2nd level) or\n             |  Lesser Restoration\nFavor        | Greater Restoration\nSmiting      | """ + ("Branding Smite\nSummons      | Planar Ally" if v2014 else "Shining Smite\nSummons      | Guardian of Faith") + "\nWind Walking | Wind Walk```"

base_fields = f""" -f "`{ctx.prefix+ctx.alias} roll new`|Rolls randomly for the beads and saves them to a cvar named 'PrayerBeads' for later use." -f "`{ctx.prefix+ctx.alias} cast <spell> [casting arguments]`|This will cast the coresponding spell and consume a bead.  Specify the spell like: `{ctx.prefix+ctx.alias} cast 'cure wounds'` or `{ctx.prefix+ctx.alias} cast wind`.  Partial matching will work. Use the typical casting arguments for this." -f "`{ctx.prefix+ctx.alias} set [type] [type]...`|Enter up to six types, separated by spaces, to set the types of beads on the necklace.  Use the following options to set the beads: `Blessing`, `Curing`, `Favor`, `Smiting`, `Summons`, `'Wind Walking'`.\nPartial matching will work." """

base_desc   = f"""-desc "You currently have {len(beads) if beads else 'zero'} bead{'s' if (len(beads)>1 or not beads) else ''} on your necklace. {'**'+'**, **'.join(beads[:-1])+'** and **'+beads[-1]+'**' if len(beads)>1 else '' if not beads else '**'+beads[0]+'**'}.\n\nYou can use them to cast the corresponding spells:{spell_table}" """ if beads else f""" -desc "This necklace has 1d4 + 2 magic beads made from aquamarine, black pearl, or topaz. It also has many nonmagical beads made from stones such as amber, bloodstone, citrine, coral, jade, pearl, or quartz. If a magic bead is removed from the necklace, that bead loses its magic.\n\nSix types of magic beads exist. The GM decides the type of each bead on the necklace or determines it randomly. A necklace can have more than one bead of the same type. To use one, you must be wearing the necklace. Each bead contains a spell that you can cast from it as a bonus action (using your spell save DC if a save is necessary). Once a magic bead's spell is cast, that bead can't be used again until the next dawn." """
flavor      = ' -color <color> -thumb https://media-waterdeep.cursecdn.com/avatars/thumbnails/18/903/315/315/636381755691898979.jpeg'

# ----------------- #
# rolling for beads #
# ----------------- #
if "roll new" in "&*&".lower():
      r            = vroll('1d4+2')  # a roll for bead quantity
      table        = {"6": "Blessing", "12": "Curing", "16": "Favor", "18": "Smiting", "19": "Summons", "20": "Wind Walking"}  # a dict for getting bead types from our rolls
      beads_rolled = [vroll('1d20') for x in range(r.total)]  # a list of rolls for bead types
      results      = []  # an empty list to append our results
      for bead in beads_rolled:
            results.append([table[x] for x in table if bead.total<=int(x)][0])  # compare our rolls to the table to get bead names
      title =f""" -title "{name} rolls for the beads on their {cc}!" """
      desc  =f""" -desc "**Roll for Amount of Beads:** {r}\n\n**Rolled Beads:**\n{n.join([f'{beads_rolled[x]} - {results[x]}' for x in range(r.total)])}" """
      fields=f""" -f "The beads rolled above can be used to cast the corresponding spells shown this list:|{spell_table}" """
      PBDict['reset']     = results  # store our reset bead types for the necklace
      PBDict['available'] = results  # store our usable bead types
      ch.set_cvar('PrayerBeads',dump_json(PBDict))  # store our dict as a cvar


# ---------------- #
# cast with a bead #
# ---------------- #
elif "&1&".lower()=="cast" and beads:
      # match args to a list to grab a full spell name
      spell = [x for x in list(spellBeads) if "&2&".lower() in x]+[None]
      # error if no matches
      if spell[0]==None:
            err(f"""_ _\nNo {'matches were found for the spell `&2&`' if '&2&'!='&2'+'&' else 'spell'} entered. You can cast the following:\n`{'`, `'.join([f'{x.title()}' for x,y in spellBeads.items() if y in beads])}`{n}From your available Prayer Beads:{n}`{'`, `'.join(beads)}`""")
      # error if multiple matches
      elif len(spell)>2:
            err(f"""_ _\nMultiple matches were found for `&2&`: {', '.join([f'**{x.title()}**' for x in spell[:-1]])}""")

      # cast the spell and remove the bead if there is only one match
      elif spellBeads[spell[0]] in beads:
            beads.remove(spellBeads[spell[0]])  # remove the bead we are casting from our list
            PBDict['available'] = beads         # update our dict
            ch.set_cvar('PrayerBeads',dump_json(PBDict))  # store our dict again as a cvar
            bead_display=f"""You currently have {len(beads) if beads else 'no more magical'} bead{'s' if (len(beads)>1 or not beads) else ''} on your necklace. {f'`{"`, `".join(beads[:-1])}` and `{beads[-1]}`.' if len(beads)>1 else '' if not beads else f'`{beads[0]}`.'}"""
            return f'''cast "{spell[0]}" -i {'-l 2' if spell[0]=='cure wounds' else ''} {' '.join([f'"{x}"' for x in &ARGS&[2:]])} -phrase "using their {cc}!" -f "{bead_display}\n\n{ctx.prefix+ctx.alias} [cast/set/roll new] [-t target(s)] [casting args]" {flavor} '''
      # return error if spell doesn't match available beads
      else:
            title = f"""-title "{name} can't find the {spellBeads[spell[0]]} bead on their {cc}!" """
            desc  = base_desc
            fields= base_fields


# ---------------------- #
# manually set the beads #
# ---------------------- #
elif "&1&".lower()=="set":
      beads = []  # a list to append our results
      for x in &ARGS&[1:]:  # loop over all the args except the first to find matches
            new_bead = ([bead_type for bead_type in ['Blessing', 'Curing', 'Favor', 'Smiting', 'Summons', 'Wind Walking'] if x.lower().strip(',') in bead_type.lower()]+[None])[0]
            if new_bead:
                  # add it to the list if we get a match
                  beads.append(new_bead)

      # once our list is made, set the values of our dict, limiting results to 6
      PBDict['reset']     = beads[:6]
      PBDict['available'] = beads[:6]
      # store our dict as a cvar
      ch.set_cvar('PrayerBeads',dump_json(PBDict))
      beads = PBDict.reset
      title =f""" -title "{name} sets the beads on their {cc}!" """
      desc  =f""" -desc "You just set {len(beads) if beads else 'zero'} bead{'s' if (len(beads)>1 or not beads) else ''} on your necklace. {'`'+'`, `'.join(beads[:-1])+'` and `'+beads[-1]+'`.' if len(beads)>1 else '' if not beads else '`'+beads[0]+'`.'}\n\nIf your desired beads did not appear above, try again.  You can enter up to six types, separated by spaces, to set the types of beads on the necklace.  Use the following options to set the beads: `Blessing`, `Curing`, `Favor`, `Smiting`, `Summons`, `'Wind Walking'`.\nPartial matching will work." """

# ----- #
# reset #
# ----- #
elif "&1&".lower()=="reset" and PBDict.reset:
      title = f""" -title "{name} feels the power of their necklace grow!" """
      desc  = f""" -desc "You have recharged {len(beads) if beads else 'no'} magical bead{'s' if (len(beads)>1 or not beads) else ''} on your necklace. {f'''You can cast the following:{n}`{'`, `'.join([f'{x.title()}' for x,y in spellBeads.items() if y in beads])}` {n}From your available Prayer Beads:{n}`{'`, `'.join(beads)}`''' if beads else ''}" """

# message for existing user who didn't enter a command
elif exists("PrayerBeads"):
      title = f""" -title "{name} checks the manual for their {cc}!" """
      desc  = f""" -desc "You currently have {len(beads) if beads else 'no'} magical bead{'s' if (len(beads)>1 or not beads) else ''} on your necklace. {f'''You can cast the following:{n}`{'`, `'.join([f'{x.title()}' for x,y in spellBeads.items() if y in beads])}` {n}From your available Prayer Beads:{n}`{'`, `'.join(beads)}`''' if beads else ''}{n}Once you long rest, or use `{ctx.prefix+ctx.alias} reset` your necklace will regain the use of {(f'`{"`, `".join(PBDict.reset[:-1])}` and `{PBDict.reset[-1]}`.' if len(PBDict.reset)>1 else '' if not PBDict.reset else f'`{PBDict.reset[0]}`.') if PBDict.reset else 'whatever magic beads you have rolled or assigned to the necklace.'}" """
      fields= base_fields


# message for a new user
else:
      desc  = base_desc+f"\n\n**You didn't set up your {cc} yet.**  See below for instructions."
      fields= base_fields


# only display the cc used field if we did a reset and have beads to reset
if mod and PBDict.reset and not "roll new" in "&*&".lower() and not '&1&'.lower()=='set':
      fields += f""" -f "{cc}|{'' if '&1&'=='reset' else ch.cc_str(cc)+' (-1)'}  _-counter used to reset your beads-_" """

# return our embed
return f"""{alias} {title} {desc} {fields} -f "{ctx.prefix+ctx.alias} [cast/set/roll new] [-t target(s)] [casting args]" {flavor} """
</drac2>  